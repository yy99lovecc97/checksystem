<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->

<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->

<configuration status="WARN" monitorInterval="20">

    <!--先定义所有的appender-->

    <appenders>

        <!--这个输出控制台的配置
        %l        输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
        %d       输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}，可指定格式 如 %d{HH:mm:ss}
        %p       输出优先级，即 FATAL ,ERROR,WARN 等
        %m      输出代码指定信息，如info(“message”),输出message
        %n       换行符
        -->

        <console name="Console" target="SYSTEM_OUT">

            <!--输出日志的格式-->

            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss,SSS} [%p] - %l - %m%n"/>

        </console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->

        <File name="log" fileName="log/test.log" append="false">
            <!--
            %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
            %msg     日志文本
            -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>

        </File>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->

        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${LOG_FILE_NAME}_info.log"

                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->

            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>

            <Policies>

                <!-- TimeBasedTriggeringPolicy 超过指定时间时，触发Rolling
            需要和filePattern结合使用 filePattern中的${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i.log
            此时是mm，指定时间单位为分钟--> 
                <TimeBasedTriggeringPolicy interval="1" />

                <!-- SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling -->
                <SizeBasedTriggeringPolicy size="100 MB"/>

            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了30 -->
            <DefaultRolloverStrategy max="30"/>

        </RollingFile>

        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/${LOG_FILE_NAME}_warn.log"

                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">

            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>

            <Policies>

                <TimeBasedTriggeringPolicy interval="1"/>

                <SizeBasedTriggeringPolicy size="100 MB"/>

            </Policies>


            <DefaultRolloverStrategy max="30"/>

        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${LOG_FILE_NAME}_error.log"

                     filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">

            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>

            <Policies>

                <TimeBasedTriggeringPolicy interval="1"/>

                <SizeBasedTriggeringPolicy size="100 MB"/>

            </Policies>
            <DefaultRolloverStrategy max="30"/>

        </RollingFile>

    </appenders>

    <!--然后定义logger，只有定义了logger并引入appender，appender才会生效-->

    <loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->

        <logger name="org.springframework" level="INFO"></logger>

        <logger name="org.hibernate" level="INFO"></logger>

        <root level="all">

            <appender-ref ref="Console"/>

            <appender-ref ref="RollingFileInfo"/>

            <appender-ref ref="RollingFileWarn"/>

            <appender-ref ref="RollingFileError"/>

        </root>

    </loggers>

</configuration>